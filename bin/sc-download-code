#!/bin/bash

USAGE="Usage: sc-download-code staging|production (or whatever your targets are called, see your deployment directory)"

if [ ! -d "deployment" ]; then
  echo "I don't see a deployment folder in the current directory."
  exit 1
fi

if [ -z "$1" ] ; then
  echo $USAGE
  exit 1
fi

TARGET=$1

if [ -f "deployment/rsync_exclude.txt" ]; then
  EXCLUDE="--exclude-from=deployment/rsync_exclude.txt"
else
  EXCLUDE=""
fi

# Settings files need to exist
source deployment/settings || exit 1
source deployment/settings.$TARGET || exit 1

# rsync to a new folder, then flip the symlink if everything runs without error.
#
# start is run after the symlink is changed so the current directory looks
# more reasonable to other scripts.

CURRENT="$DIR/current"

ALLOW_FOR_SUDO=""
RSYNC_PATH="rsync"
if [ "$REMOTE_SUDO_USER" ]; then
  ALLOW_FOR_SUDO="sudo -i -u $REMOTE_SUDO_USER"
  RSYNC_PATH="sudo -i -u $REMOTE_SUDO_USER rsync"
fi

# For now we just don't check whether 'stop' worked, because it fails on the first
# deploy (chicken and egg problem, stop isn't there yet). TODO: fix this with
# an 'if folder exists' test on the server; make the remote script a multiline,
# maintainable thing

ssh $SSH_OPTIONS -p $SSH_PORT $USER@$SERVER $ALLOW_FOR_SUDO "mkdir -p $DIR/deployments" &&
 
# -C excludes many things, add back "core" because it is not an uncommon
# folder name in npm modules

rsync -e "ssh $SSH_OPTIONS -p $SSH_PORT -l$USER" --rsync-path="$RSYNC_PATH" $ALLOW_FOR_SUDO_RSYNC_PATH -C -a --delete $EXCLUDE --include "core" . $USER@$SERVER:$DEPLOYTO &&

if [ $? -ne 0 ]; then
  echo "Download failed!"
  exit 1
else
  echo "Download successful."
fi
